#!/bin/bash

# chkconfig: 345 90 90
# description: Azkaban Solo server

### BEGIN INIT INFO
# Provides:       azkaban-solo
# Required-Start: $remote_fs $network
# Required-Stop:  $remote_fs $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Description:    Azkaban Solo server service script
### END INIT INFO

service=azkaban-solo


##
# Setting default configuration
AZKABAN_USER="azkaban"
AZKABAN_GROUP="azkaban"
AZKABAN_HOME="/opt/azkaban-solo"
AZAKBAN_CONF="${AZKABAN_HOME}/conf"
AZKABAN_TMP="/tmp"
AZKABAN_EXECUTOR_PORT=12321
AZKABAN_OPTS=""


##
# Locals ervice settings
SERVICE_MAX_WAIT=10
DEFAULT_PERMISSIONS=0755
JAVA=""
AZKABAN_CLASSPATH=""
START_TIMEOUT=5
PID_DIR="/var/run/${service}"
LOG_DIR="/var/log/${service}"


##
# source platform specific(debian) external scripts
. /lib/lsb/init-functions

[ -r /etc/default/${service} ] && . /etc/default/${service}


pattern="__AZKABAN_SOLO__"
lock_file=${LOCKFILE:-/var/lock/${service}}
pid_file=${PID_DIR}/${service}.pid
log_file=${LOG_DIR}/${service}_service.log


##
# Ensure the existence, permisions and owner of a directory
_ensure_directory( ) {
  local directory="${1}"
  local user=${2:-${AZKABAN_USER}}
  local permissions=${3:-${DEFAULT_PERMISSIONS}}

  if [ ! -d "${directory}" ]; then

    mkdir -p "${directory}"
    chown -R ${user} "${directory}"
    chmod ${permissions} "${directory}"
  fi
}


##
# Show a basic help screen
_show_help( ) {
  local error_code=${1:-0}

  echo "${0} {start|stop|status|restart}"
  exit ${error_code}
}


##
# Do all these dirty things that JVM needs
_load_classpath( ) {

  AZKABAN_CLASSPATH=""

  for f in ${AZKABAN_HOME}/lib/*.jar; do
    AZKABAN_CLASSPATH=${AZKABAN_CLASSPATH}:${f}
  done 2>/dev/null

  for f in ${AZKABAN_HOME}/extlib/*.jar; do
    AZKABAN_CLASSPATH=${AZKABAN_CLASSPATH}:${f}
  done 2>/dev/null

  for f in ${AZKABAN_HOME}/plugins/*.jar; do
    AZKABAN_CLASSPATH=${AZKABAN_CLASSPATH}:${f}
  done 2>/dev/null

  if [ -n "${HADOOP_HOME}" ]; then

    AZKABAN_CLASSPATH=${AZKABAN_CLASSPATH}:${HADOOP_HOME}/conf:${HADOOP_HOME}/lib/*
    options="${options} -Djava.library.path=${HADOOP_HOME}/lib/native/Linux-amd64-64"
  fi

  if [ -n "${HIVE_HOME}" ]; then

    AZKABAN_CLASSPATH=${AZKABAN_CLASSPATH}:${HIVE_HOME}/conf:${HIVE_HOME}/lib/*
  fi
}


##
# Determines where is the java command
_get_java( ) {
  
  if [ -z "${JAVA_HOME}" ]; then

    log_action_msg "JAVA_HOME environment variable not defined"
    log_end_msg 5
  fi

  if [ -x "${JAVA_HOME}/jre/bin/java" ]; then

    JAVA="${JAVA_HOME}/jre/bin/java"
  else
  if [ -x "${JAVA_HOME}/bin/java" ]; then

    JAVA="${JAVA_HOME}/bin/java"
  else

    log_action_msg "Java has not been located at the system"
    log_end_msg 5
  fi
  fi
}


##
# Start the service
do_start( ) {
  local retval=0

  log_daemon_msg "Starting ${service}"
  do_status &> /dev/null

  if [ ${?} -eq 0 ]; then

    log_action_msg " is already running"
    log_end_msg 0

    retval=0
  else

    _get_java
    _ensure_directory ${PID_DIR} ${AZKABAN_USER}
    _ensure_directory ${LOG_DIR} ${AZKABAN_USER}

    #Â Load the classpath JVM
    _load_classpath

    # Launch the JVM
    su - ${AZKABAN_USER} -c "${JAVA} -D${pattern} ${AZKABAN_OPTS} -classpath ${AZKABAN_CLASSPATH} azkaban.webapp.AzkabanSingleServer -conf ${AZKABAN_CONF} &"

    retval=${?}
    sleep ${START_TIMEOUT}

    pid=$(ps -e -o pid,command | grep -v grep | grep "${pattern}" | awk '{ print $1 }')
    echo "${pid}" > ${pid_file}

    do_status &> /dev/null

    if [ ${?} -ne 0 ]; then

      log_end_msg 1

      retval=1
    else
      [ ${retval} -eq 0 ] && touch ${lock_file}

      log_end_msg 0
    fi
  fi

  return ${retval}
}


##
# Stops the service
do_stop( ) {
   
  log_daemon_msg "Stopping ${service}"

  if [ -f ${pid_file} ]; then

    killproc -p ${pid_file} ${service}
    retval=${?}

    if [ ${retval} -eq 0 ]; then

      rm -f ${pid_file}
      rm -f ${lock_file}

      log_end_msg 0
    else

      log_end_msg 1
    fi

    sleep 1
    return ${retval}
  else
    pid=$(ps -e -o pid,command | grep -v grep | grep "${pattern}" | awk '{ print $1 }')

    if [ -n "${pid}" ]; then

      kill ${pid}
      retval=${?}

      if [ ${retval} -eq 0 ]; then

        rm -f ${pid_file}
        rm -f ${lock_file}

        log_end_msg 0
      else

       log_end_msg 1
      fi

      sleep 1
      return ${retval}
    else

      log_end_msg 1
    fi
  fi
}


##
# Get the status of the service
do_status( ) {

  local pid=""

  pid=$(ps -e -o pid,command | grep -v grep | grep "${pattern}" |  awk '{ print $1 }')

  if [ -n "${pid}" ]; then

    log_action_msg "$service (pid ${pid}) is running"
    return 0
  fi

  if [ -f "${pid_file}" ]; then

    read pid < "${pid_file}"
    if [ -n "${pid}" ]; then

      log_action_msg "${service} dead but pid file exists"
      return 1
    fi
  fi

  # See if lock file exist
  if [ -f "${lock_file}" ]; then

    log_action_msg "${service} dead but subsys locked"
    return 2
  fi

  log_action_msg "${service} is stopped"
  return 3
}


##
# Stops the service
do_restart( ) {
  local count=0
  local success=0

  do_stop

  while [ ${count} -lt ${SERVICE_MAX_WAIT} ]; do

    count=$((count + 1))
    do_status &> /dev/null

    if [ ${?} -eq 0 ]; then
      # still running
      sleep 1
    else
      success=1
      break
    fi
  done

  if [ ${success} = 1 ]; then

    do_start
  else

    log_failure_msg "Timed out waiting for ${service} to stop"
    return 1
  fi
}



##
# ::main::
case "${1}" in
  start|stop|status|restart) 
    do_${1}
    ;;

  *)
    show_help 2
    ;;
esac


exit ${?}

